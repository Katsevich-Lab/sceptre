[{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://katsevich-lab.github.io/sceptre/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://katsevich-lab.github.io/sceptre/articles/install.html","id":"install-sceptre-v0-99-x","dir":"Articles","previous_headings":"","what":"Install sceptre v0.99.x","title":"Installation instructions for `sceptre`","text":"install latest version sceptre GitHub (currently v0.99.x, .e. beta version sceptre 1.0.0), please run following code R console:","code":"install.packages(\"devtools\") # if necessary devtools::install_github(\"katsevich-lab/sceptre\")"},{"path":"https://katsevich-lab.github.io/sceptre/articles/install.html","id":"install-sceptre-v0-3-0","dir":"Articles","previous_headings":"","what":"Install sceptre v0.3.0","title":"Installation instructions for `sceptre`","text":"install previous stable version package (v0.3.0), please run following code R console: recommend users switch sceptre v0.99.x soon can.","code":"install.packages(\"devtools\") # if necessary devtools::install_github(\"katsevich-lab/sceptre\", ref = \"v0.3.0\")"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"import-data","dir":"Articles","previous_headings":"","what":"1. Import data","title":"Getting started with sceptre","text":"first step import data. Data can imported sceptre 10x Cell Ranger Parse outputs, well R matrices. simplest way import data read output one calls cellranger_count sceptre via function import_data_from_cellranger(). import_data_from_cellranger() requires three arguments: directories, grna_target_data_frame, moi. directories character vector specifying locations directories outputted one calls cellranger_count. , set variable directories (machine-dependent) location example CRISPRi data disk. directories points two directories, store expression data matrix market format contain files barcodes.tsv.gz, features.tsv.gz, matrix.mtx.gz. grna_target_data_frame data frame mapping individual gRNA genomic element gRNA targets. grna_target_data_frame contains two required columns: grna_id grna_target. grna_id ID individual gRNA, grna_target label specifying genomic element gRNA targets. (Typically, multiple gRNAs designed target given genomic element single-cell CRISPR screen.) Non-targeting (NT) gRNAs assigned gRNA target label “non-targeting”. grna_target_data_frame optionally contains columns chr, start, end, give chromosome, start coordinate, end coordinate, respectively, genomic region gRNA targets. Finally, grna_target_data_frame optionally can contain column vector_id specifying vector given gRNA belongs. vector_id supplied experiments viral vector contains two distinct gRNAs (, e.g., (Replogle, 2022)). load examine grna_target_data_frame corresponding example data. gRNAs (e.g., ENSG00000224277_grna1) target gene transcription start sites serve positive controls; gRNAs (e.g., candidate_enh_1_grna1) target candidate enhancers, others still (e.g., non-targeting_grna1) non-targeting. gene candidate enhancer dataset targeted exactly two gRNAs. moi string specifying multiplicity--infection (MOI) data, taking values \"high\" \"low\". high-MOI (respectively, low-MOI) dataset one experimenter aimed insert multiple gRNAs (respectively, single gRNA) cell. (given cell determined contain multiple gRNAs low-MOI screen, cell removed part quality control step, discussed .) example dataset high MOI dataset, set moi \"high\". Finally, call function import_data_from_cellranger(), passing directories, grna_target_data_frame, moi arguments. import_data_from_cellranger() returns sceptre_object, object-based representation single-cell CRISPR screen data. Evaluating sceptre_object console prints helpful summary data. Several metrics displayed, including number cells, number genes (“responses”), number gRNAs present data. sceptre also automatically computes following cell-specific covariates: grna_n_nonzero (.e., number gRNAs expressed cell), grna_n_umis (.e., number gRNA UMIs sequenced cell), response_n_nonzero (.e., number responses expressed cell), response_n_umis (.e., number response UMIs sequenced cell), response_p_mito (.e., fraction transcripts mapping mitochondrial genes), batch. (Cells loaded different directories assumed come different batches.)","code":"directories <- paste0(   system.file(\"extdata\", package = \"sceptre\"),    \"/highmoi_example/gem_group_\", 1:2 ) directories # file paths to the example data on your computer ## [1] \"/private/var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T/RtmpqERWcN/temp_libpath110dc41d20f3c/sceptre/extdata/highmoi_example/gem_group_1\" ## [2] \"/private/var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T/RtmpqERWcN/temp_libpath110dc41d20f3c/sceptre/extdata/highmoi_example/gem_group_2\" list.files(directories[1]) ## [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\" list.files(directories[2]) ## [1] \"barcodes.tsv.gz\" \"features.tsv.gz\" \"matrix.mtx.gz\" data(grna_target_data_frame_highmoi) grna_target_data_frame_highmoi[c(1:4, 11:14, 51:54),] ##                  grna_id     grna_target   chr    start      end ## 1  ENSG00000224277_grna1 ENSG00000224277 chr22 23567064 23567113 ## 2  ENSG00000224277_grna2 ENSG00000224277 chr22 23567114 23567163 ## 3  ENSG00000233521_grna1 ENSG00000233521 chr22 27225134 27225183 ## 4  ENSG00000233521_grna2 ENSG00000233521 chr22 27225184 27225233 ## 11 candidate_enh_1_grna1 candidate_enh_1 chr22 20772896 20772945 ## 12 candidate_enh_1_grna2 candidate_enh_1 chr22 20772946 20772995 ## 13 candidate_enh_2_grna1 candidate_enh_2 chr22 19998415 19998464 ## 14 candidate_enh_2_grna2 candidate_enh_2 chr22 19998465 19998514 ## 51   non-targeting_grna1   non-targeting  <NA>       NA       NA ## 52   non-targeting_grna2   non-targeting  <NA>       NA       NA ## 53   non-targeting_grna3   non-targeting  <NA>       NA       NA ## 54   non-targeting_grna4   non-targeting  <NA>       NA       NA moi <- \"high\" sceptre_object <- import_data_from_cellranger(   directories = directories,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = moi ) sceptre_object ## An object of class sceptre_object. ##  ## Attributes of the data: ##  • 500 cells ##  • 100 responses ##  • High multiplicity-of-infection  ##  • 50 targeting gRNAs (distributed across 25 targets)  ##  • 10 non-targeting gRNAs  ##  • 5 covariates (batch, grna_n_nonzero, grna_n_umis, response_n_nonzero, response_n_umis)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"set-analysis-parameters","dir":"Articles","previous_headings":"","what":"2. Set analysis parameters","title":"Getting started with sceptre","text":"second step set analysis parameters. important analysis parameters discovery pairs, positive control pairs, sidedness, gRNA grouping strategy. Discovery pairs positive control pairs. primary goal sceptre determine whether perturbation gRNA target (enhancer) leads change expression response (gene). use term target-response pair refer given gRNA target response seek test association (upon perturbation gRNA target). discovery target-response pair target-response pair whose association status know like learn. example, experiment aim link putative enhancers genes, discovery target-response pairs might consist set putative enhancers genes close physical proximity one another. positive control (resp., negative control) target-response pair target-response pair know (resp., ) relationship target response. Positive control target-response pairs often formed coupling transcription start site gene known regulated transcription start site. Negative control target-response pairs, meanwhile, typically constructed pairing negative control gRNAs one responses. (defer detailed discussion negative control pairs later section chapter.) Discovery pairs primary scientific interest, positive control negative control pairs serve mainly technial purpose, helping us verify biological assay statistical methodology working order. sceptre offers several helper functions facilitate construction positive control discovery pairs. function construct_positive_control_pairs() takes argument sceptre_object outputs set positive control pairs formed matching gRNA targets (contained grna_target_data_frame) response IDs. Positive control pairs optional need computed. Next, functions construct_cis_pairs() construct_trans_pairs() facilitate construction cis trans discovery sets, respectively. construct_cis_pairs() takes arguments sceptre_object integer distance_threshold returns set response-target pairs located chromosome within distance_threshold bases one another. positive_control_pairs optionally can passed function, case positive control gRNA targets excluded cis pairs. (Note construct_cis_pairs() assumes responses genes rather , say, proteins chromatin-derived features.) construct_trans_pairs() constructs entire set possible target-response pairs. Sidedness. parameter side controls whether run left-tailed (\"left\"), right-tailed (\"right\"), two-tailed (\"\"; default) test. left-tailed (resp., right-tailed) test appropriate testing decrease (resp., increase) expression; two-tailed test, contrast, appropriate testing increase decrease expression. left-tailed test appropriate choice CRISPRi screen enhancers, set side \"left\". gRNA integration strategy. Typically, multiple gRNAs designed target given genomic element. parameter grna_integration_strategy controls gRNAs target genomic element integrated. default option, \"union\", combines gRNAs target element single “grouped gRNA;” “grouped gRNA” tested association responses element paired. grna_integration_strategy also can set “singleton,” case gRNA targeting given element tested individually responses paired element. analysis use default “union” strategy. Finally, set analysis parameters calling function set_analysis_parameters(), passing sceptre_object, discovery_pairs, positive_control_pairs, side arguments. Note sceptre_object required arguments function.","code":"positive_control_pairs <- construct_positive_control_pairs(sceptre_object) head(positive_control_pairs) ##       grna_target     response_id ## 1 ENSG00000224277 ENSG00000224277 ## 2 ENSG00000233521 ENSG00000233521 ## 3 ENSG00000226772 ENSG00000226772 ## 4 ENSG00000234503 ENSG00000234503 ## 5 ENSG00000286326 ENSG00000286326 discovery_pairs <- construct_cis_pairs(   sceptre_object = sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 ) discovery_pairs[c(1:4, 101:104),] ##         grna_target     response_id ## 1   candidate_enh_1 ENSG00000099889 ## 2   candidate_enh_1 ENSG00000040608 ## 3   candidate_enh_1 ENSG00000273343 ## 4   candidate_enh_1 ENSG00000161133 ## 101 candidate_enh_2 ENSG00000211638 ## 102 candidate_enh_2 ENSG00000211640 ## 103 candidate_enh_2 ENSG00000253126 ## 104 candidate_enh_2 ENSG00000211641 side <- \"left\" sceptre_object <- set_analysis_parameters(   sceptre_object = sceptre_object,   discovery_pairs = discovery_pairs,   positive_control_pairs = positive_control_pairs,   side = side ) print(sceptre_object) # output suppressed for brevity"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"assign-grnas-to-cells-optional","dir":"Articles","previous_headings":"","what":"3. Assign gRNAs to cells (optional)","title":"Getting started with sceptre","text":"third step assign gRNAs cells. step can skipped, case gRNAs assigned cells automatically using default options. gRNA assignment step involves using gRNA UMI counts determine cells contain gRNAs. begin plotting UMI count distribution several randomly selected gRNAs via call function plot_grna_count_distributions(). Histograms gRNA count distributions gRNAs display bimodal count distributions. Consider, example, candidate_enh_6_grna1 (top left corner). gRNA exhibits UMI count \\(\\leq 2\\) \\(\\geq 8\\) cells UMI count handful cells. vast majority cells UMI count 1 2 likely actually contain candidate_enh_6_grna1. example “background contamination,” phenomenon gRNA transcripts sometimes map cells contain corresponding gRNA. sceptre provides three methods assigning gRNAs cells (“mixture method,” “maximum method,” “thresholding method”), account background contamination. default method high-MOI data “mixture method.” gRNA counts regressed onto (unobserved) gRNA presence/absence indicator cell-specific covariates (e.g., grna_n_umis, batch) via latent variable Poisson GLM. fitted model yields probability cell contains gRNA, probabilities thresholded assign gRNA cells. default method low-MOI simpler “maximum” approach: gRNA accounts greatest number UMIs given cell assigned cell. backup option low- high-MOI “thresholding” approach: given gRNA assigned given cell UMI count gRNA cell exceeds integer threshold. carry gRNA assignment step via call function assign_grnas(). assign_grnas() takes arguments sceptre_object (required) method (optional); latter argument can set \"mixture\", \"maximum\", \"thresholding\". parallelize execution assign_grnas() setting parallel TRUE. (Parallel execution yet configured Windows. recommend Windows users seeking parallelize analysis leverage sceptre Nextflow pipeline.) can call plot() resulting sceptre_object render plot summarizing output gRNA--cell assignment step. gRNA--cell assignments top panel plots gRNA--cell assignments three randomly selected gRNAs. plot points represent cells; vertical axis indicates UMI count gRNA given cell, horizontal axis indicates whether cell classified “perturbed” (.e., contains gRNA) unperturbed (.e., contain gRNA). Perturbed (resp., unperturbed) cells shown left (resp., right) column. bottom left panel barplot number cells gRNA mapped. Finally, bottom right panel histogram number gRNAs contained cell. mean number gRNAs per cell — .e., MOI — displayed purple text.","code":"plot_grna_count_distributions(sceptre_object) sceptre_object <- assign_grnas(sceptre_object = sceptre_object, parallel = TRUE, n_processors = 2) print(sceptre_object) # output suppressed for brevity plot(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"run-quality-control-optional","dir":"Articles","previous_headings":"","what":"4. Run quality control (optional)","title":"Getting started with sceptre","text":"fourth step run quality control (QC). step likewise can skipped, case QC applied automatically using default options. sceptre implements two kinds QC: cellwise QC pairwise QC. former aims remove low-quality cells, latter aims remove low-quality target-response pairs. cellwise QC sceptre implements standard single-cell analysis. Cells response_n_nonzero (.e., number expressed responses) response_n_umis (.e., number response UMIs) extremely high extremely low removed. Likewise, cells response_p_mito (.e., fraction UMIs mapping mitochondrial genes) excessively high removed. Additionally, low-MOI, cells contain zero multiple gRNAs (determined RNA--cell assignment step) removed. Finally, users optionally can provide list additional cells remove. sceptre also implements QC level target-response pair. given pair define “treatment cells” contain gRNA targeting given target. Next, define “control cells” cells treatment cells compared carry differential expression test. define “number nonzero treatment cells” (n_nonzero_trt) number treatment cells nonzero expression response; similarly, define “number nonzero control cells” (n_nonzero_cntrl) number control cells nonzero expression response. sceptre filters pairs n_nonzero_trt n_nonzero_cntrl falls threshold (default 7). call function run_qc() sceptre_object carry cellwise pairwise QC. run_qc() several optional arguments control stringency various QC thresholds. example, set p_mito_threshold = 0.075, filters cells whose response_p_mito value exceeds 0.075. (optional arguments set reasonable defaults; default p_mito_threshold 0.2, instance). can visualize output QC step calling plot() updated sceptre_object. Cellwise pairwise quality control top panel depicts outcome cellwise QC. various cellwise QC filters (e.g., “N nonzero responses,” “N response UMIs,” “Percent mito”, etc.) shown horizontal axis, percentage cells removed due application given QC filter shown vertical axis. Note cell can flagged multiple QC filters; example, cell might extremely high response_n_umi value extremely high response_n_nonzero value. Thus, height “filter” bar (indicates percentage cells removed due application filter) need equal sum heights bars. bottom panel depicts outcome pairwise QC. point corresponds target-response pair; vertical axis (resp., horizontal axis) indicates n_nonzero_trt (resp., n_nonzero_cntrl) value pair. Pairs n_nonzero_trt n_nonzero_cntrl fall threshold removed (red), remaining pairs retained (green).","code":"sceptre_object <- run_qc(sceptre_object, p_mito_threshold = 0.075) print(sceptre_object) # output suppressed for brevity plot(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"run-calibration-check","dir":"Articles","previous_headings":"","what":"5. Run calibration check","title":"Getting started with sceptre","text":"fifth step run calibration check. calibration check analysis verifies sceptre controls rate false discoveries dataset analysis. calibration check proceeds follows. First, negative control target-response pairs constructed (automatically) coupling subsets NT gRNAs randomly selected responses. Importantly, negative control pairs constructed way similar discovery pairs, difference negative control pairs devoid biological signal. Next, sceptre applied analyze negative control pairs. Given negative control pairs absent signal, sceptre produce approximately uniformly distributed p-values negative control pairs. Moreover, appropriate multiple testing correction, sceptre make zero () discoveries negative control pairs. Verifying calibration via calibration check increases confidence discovery set sceptre ultimately produces uncontaminated excess false positives. run calibration check calling function run_calibration_check() sceptre_object. can assess outcome calibration check calling plot() resulting sceptre_object. Calibration check results visualization consists four panels, describe . upper left panel QQ plot p-values plotted untransformed scale. p-values lie along diagonal line, indicating uniformity p-values bulk distribution. upper right panel QQ plot p-values plotted negative log-10 transformed scale. p-values lie along diagonal line (majority p-values falling within gray confidence band), indicating uniformity p-values tail distribution. lower left panel histogram estimated log-2 fold changes. histogram roughly symmetric centered around zero. Finally, bottom right panel text box displaying () number false discoveries sceptre made negative control data (ii) mean estimated log-fold change. number false discoveries small integer like zero, one, two, three, zero ideal. mean estimated log-fold change, meanwhile, numeric value close zero; number range [-0.1, 0.1] adequate. sceptre may exhibit good calibration initially, OK. See book strategies improving calibration.","code":"sceptre_object <- run_calibration_check(sceptre_object, parallel = TRUE, n_processors = 2) print(sceptre_object) # output suppressed for brevity plot(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"run-power-check-optional","dir":"Articles","previous_headings":"","what":"6. Run power check (optional)","title":"Getting started with sceptre","text":"sixth step — optional — run power check. power check involves applying sceptre analyze positive control pairs. Given positive control pairs known contain signal, sceptre produce significant (.e., small) p-values positive control pairs. power check enables us assess sceptre’s power (.e., ability detect true associations) dataset analysis. run power check calling function run_power_check() sceptre_object. can visualize outcome power check calling plot() resulting sceptre_object. Power check results point plot corresponds target-response pair, positive control pairs left column negative control pairs right column. vertical axis indicates p-value given pair; smaller (.e., significant) p-values positioned higher along axis (p-values truncated \\(10^{-20}\\) visualization). positive control p-values small, particular, smaller negative control p-values.","code":"sceptre_object <- run_power_check(sceptre_object, parallel = TRUE, n_processors = 2) print(sceptre_object) # output suppressed for brevity plot(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"run-discovery-analysis","dir":"Articles","previous_headings":"","what":"7. Run discovery analysis","title":"Getting started with sceptre","text":"seventh penultimate step run discovery analysis. discovery analysis entails applying sceptre analyze discovery pairs. run discovery analysis calling function run_discovery_analysis(). can visualize outcome discovery analysis calling plot() resulting sceptre_object. Discovery analysis results visualization consists four panels. upper left plot superimposes discovery p-values (blue) top negative control p-values (red) untransformed scale. upper right plot upper left plot, scale negative log-10 transformed. discovery p-values trend diagonal line, indicating presence signal discovery set. horizontal dashed line indicates multiple testing threshold; discovery pairs whose p-value falls line called significant. bottom left panel volcano plot p-values log fold changes discovery pairs. point corresponds pair; estimated log-2 fold change pair plotted horizontal axis, (negative log-10 transformed) p-value plotted vertical axis. horizontal dashed line indicates multiple testing threshold. Points dashed line (colored purple) called discoveries, points (colored blue) called insignificant. bottom right panel text box displaying number discovery pairs called significant.","code":"sceptre_object <- run_discovery_analysis(sceptre_object, parallel = TRUE, n_processors = 2) print(sceptre_object) # output suppressed for brevity plot(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"write-outputs-to-directory","dir":"Articles","previous_headings":"","what":"8. Write outputs to directory","title":"Getting started with sceptre","text":"eighth final step write outputs analysis directory disk. call function write_outputs_to_directory(), takes arguments sceptre_object directory; directory string indicating location directory write results contained within sceptre_object. write_outputs_to_directory() writes several files specified directory: text-based summary analysis (analysis_summary.txt), various plots (*.png), calibration check, power check, discovery analysis results (results_run_calibration_check.rds, results_run_power_check.rds, results_run_discovery_analysis.rds, respectively), binary gRNA--cell assignment matrix (grna_assignment_matrix.rds). also can obtain calibration check, power check, discovery analysis results R via call function get_result(), passing arguments sceptre_object analysis, latter string indicating function whose results querying. variable result data frame, rows correspond target-response pairs, columns follows: response_id, grna_target, n_nonzero_trt, n_nonzero_cntrl, pass_qc (TRUE/FALSE value indicating whether pair passes pairwise QC), p_value, log_2_fold_change, significant (TRUE/FALSE value indicating whether pair called significant). p-value contained within p_value column raw (.e., non-multiplicity-adjusted) p-value.","code":"write_outputs_to_directory(   sceptre_object = sceptre_object,    directory = \"~/sceptre_outputs\" ) list.files(\"~/sceptre_outputs\") ##  [1] \"analysis_summary.txt\"               \"grna_assignment_matrix.rds\"         ##  [3] \"plot_assign_grnas.png\"              \"plot_grna_count_distributions.png\"  ##  [5] \"plot_run_calibration_check.png\"     \"plot_run_discovery_analysis.png\"    ##  [7] \"plot_run_power_check.png\"           \"plot_run_qc.png\"                    ##  [9] \"results_run_calibration_check.rds\"  \"results_run_discovery_analysis.rds\" ## [11] \"results_run_power_check.rds\" result <- get_result(   sceptre_object = sceptre_object,   analysis = \"run_discovery_analysis\" ) head(result) ##        response_id      grna_target n_nonzero_trt n_nonzero_cntrl pass_qc ##             <char>           <char>         <int>           <int>  <lgcl> ## 1: ENSG00000220891 candidate_enh_17            20             169    TRUE ## 2: ENSG00000211641 candidate_enh_15            77             301    TRUE ## 3: ENSG00000220891 candidate_enh_18            22             167    TRUE ## 4: ENSG00000211655  candidate_enh_5            29             165    TRUE ## 5: ENSG00000253451 candidate_enh_19            45             227    TRUE ## 6: ENSG00000211641 candidate_enh_16            75             303    TRUE ##         p_value log_2_fold_change significant ##           <num>             <num>      <lgcl> ## 1: 1.076683e-06        -1.5045534        TRUE ## 2: 3.021114e-06        -0.7431952        TRUE ## 3: 1.311570e-05        -1.2882609        TRUE ## 4: 1.550816e-05        -1.1120984        TRUE ## 5: 4.323042e-05        -0.8736588        TRUE ## 6: 5.376764e-05        -0.7329927        TRUE"},{"path":"https://katsevich-lab.github.io/sceptre/articles/sceptre.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Getting started with sceptre","text":"encourage readers interested learning consult sceptre manual.","code":"library(sessioninfo); session_info() ## ─ Session info ─────────────────────────────────────────────────────────────── ##  setting  value ##  version  R version 4.4.0 (2024-04-24) ##  os       macOS Ventura 13.4.1 ##  system   x86_64, darwin20 ##  ui       X11 ##  language en ##  collate  en_US.UTF-8 ##  ctype    en_US.UTF-8 ##  tz       America/New_York ##  date     2025-01-16 ##  pandoc   3.1.11.1 @ /usr/local/bin/ (via rmarkdown) ##  ## ─ Packages ─────────────────────────────────────────────────────────────────── ##  package     * version  date (UTC) lib source ##  BH            1.87.0-1 2024-12-17 [2] CRAN (R 4.4.1) ##  bslib         0.8.0    2024-07-29 [2] CRAN (R 4.4.0) ##  cachem        1.1.0    2024-05-16 [2] CRAN (R 4.4.0) ##  cli           3.6.3    2024-06-21 [2] CRAN (R 4.4.0) ##  colorspace    2.1-1    2024-07-26 [2] CRAN (R 4.4.0) ##  cowplot       1.1.3    2024-01-22 [2] CRAN (R 4.4.0) ##  crayon        1.5.3    2024-06-20 [2] CRAN (R 4.4.0) ##  data.table    1.16.4   2024-12-06 [2] CRAN (R 4.4.1) ##  desc          1.4.3    2023-12-10 [2] CRAN (R 4.4.0) ##  digest        0.6.37   2024-08-19 [2] CRAN (R 4.4.1) ##  dplyr         1.1.4    2023-11-17 [2] CRAN (R 4.4.0) ##  evaluate      0.23     2023-11-01 [2] CRAN (R 4.4.0) ##  farver        2.1.2    2024-05-13 [2] CRAN (R 4.4.0) ##  fastmap       1.2.0    2024-05-15 [2] CRAN (R 4.4.0) ##  fs            1.6.4    2024-04-25 [2] CRAN (R 4.4.0) ##  generics      0.1.3    2022-07-05 [2] CRAN (R 4.4.0) ##  ggplot2       3.5.1    2024-04-23 [2] CRAN (R 4.4.0) ##  glue          1.8.0    2024-09-30 [2] CRAN (R 4.4.1) ##  gtable        0.3.6    2024-10-25 [2] CRAN (R 4.4.1) ##  highr         0.10     2022-12-22 [2] CRAN (R 4.4.0) ##  htmltools     0.5.8.1  2024-04-04 [2] CRAN (R 4.4.0) ##  htmlwidgets   1.6.4    2023-12-06 [2] CRAN (R 4.4.0) ##  jquerylib     0.1.4    2021-04-26 [2] CRAN (R 4.4.0) ##  jsonlite      1.8.9    2024-09-20 [2] CRAN (R 4.4.1) ##  knitr         1.46     2024-04-06 [2] CRAN (R 4.4.0) ##  labeling      0.4.3    2023-08-29 [2] CRAN (R 4.4.0) ##  lattice       0.22-6   2024-03-20 [2] CRAN (R 4.4.0) ##  lifecycle     1.0.4    2023-11-07 [2] CRAN (R 4.4.0) ##  magrittr      2.0.3    2022-03-30 [2] CRAN (R 4.4.0) ##  Matrix      * 1.7-0    2024-03-22 [2] CRAN (R 4.4.0) ##  memoise       2.0.1    2021-11-26 [2] CRAN (R 4.4.0) ##  munsell       0.5.1    2024-04-01 [2] CRAN (R 4.4.0) ##  pillar        1.10.1   2025-01-07 [2] CRAN (R 4.4.1) ##  pkgconfig     2.0.3    2019-09-22 [2] CRAN (R 4.4.0) ##  pkgdown       2.0.9    2024-04-18 [2] CRAN (R 4.4.0) ##  purrr         1.0.2    2023-08-10 [2] CRAN (R 4.4.0) ##  R.methodsS3   1.8.2    2022-06-13 [2] CRAN (R 4.4.0) ##  R.oo          1.26.0   2024-01-24 [2] CRAN (R 4.4.0) ##  R.utils       2.12.3   2023-11-18 [2] CRAN (R 4.4.0) ##  R6            2.5.1    2021-08-19 [2] CRAN (R 4.4.0) ##  ragg          1.3.1    2024-05-06 [2] CRAN (R 4.4.0) ##  Rcpp          1.0.14   2025-01-12 [2] CRAN (R 4.4.1) ##  rlang         1.1.4    2024-06-04 [2] CRAN (R 4.4.0) ##  rmarkdown     2.26     2024-03-05 [2] CRAN (R 4.4.0) ##  rstudioapi    0.16.0   2024-03-24 [2] CRAN (R 4.4.0) ##  sass          0.4.9    2024-03-15 [2] CRAN (R 4.4.0) ##  scales        1.3.0    2023-11-28 [2] CRAN (R 4.4.0) ##  sceptre     * 0.10.0   2025-01-16 [1] Bioconductor ##  sessioninfo * 1.2.2    2021-12-06 [2] CRAN (R 4.4.0) ##  systemfonts   1.0.6    2024-03-07 [2] CRAN (R 4.4.0) ##  textshaping   0.3.7    2023-10-09 [2] CRAN (R 4.4.0) ##  tibble        3.2.1    2023-03-20 [2] CRAN (R 4.4.0) ##  tidyselect    1.2.1    2024-03-11 [2] CRAN (R 4.4.0) ##  utf8          1.2.4    2023-10-22 [2] CRAN (R 4.4.0) ##  vctrs         0.6.5    2023-12-01 [2] CRAN (R 4.4.0) ##  withr         3.0.2    2024-10-28 [2] CRAN (R 4.4.1) ##  xfun          0.43     2024-03-25 [2] CRAN (R 4.4.0) ##  yaml          2.3.10   2024-07-26 [2] CRAN (R 4.4.0) ##  ##  [1] /private/var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T/RtmpqERWcN/temp_libpath110dc41d20f3c ##  [2] /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library ##  ## ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://katsevich-lab.github.io/sceptre/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Timothy Barry. Author, maintainer. Joseph Deutsch. Author. Eugene Katsevich. Author.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Barry, T., Wang, X., Morris, J. ., Roeder, K., & Katsevich, E. (2021). SCEPTRE improves calibration sensitivity single-cell CRISPR screen analysis. Genome biology, 22(1), 1-19. Barry, T., Roeder, K., & Katsevich, E. (2024). Exponential family measurement error models single-cell CRISPR screens. Biostatistics, kxae010. Barry, T., Mason, K., Roeder, K., & Katsevich, E. (2024). Robust differential expression testing single-cell CRISPR screens low multiplicity infection. Genome Biology, 25(124), 1-30.","code":"@Article{,   note = {Please cite if you are using the high-MOI functionality.},   author = {Timothy Barry and Xuran Wang and John A Morris and Kathryn Roeder and Eugene Katsevich},   title = {SCEPTRE improves calibration and sensitivity in single-cell CRISPR screen analysis},   journal = {Genome Biology},   year = {2021},   publisher = {Springer Nature},   url = {https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02545-2}, } @Article{,   note = {Please cite if you are using the 'mixture' gRNA assignment method.},   author = {Timothy Barry and Kathryn Roeder and Eugene Katsevich},   title = {Exponential family measurement error models for single-cell CRISPR screens},   journal = {Biostatistics},   pages = {kxae010},   year = {2024},   publisher = {Oxford University Press},   url = {https://doi.org/10.1093/biostatistics/kxae010}, } @Article{,   note = {Please cite if you are using the low-MOI functionality.},   title = {Robust differential expression testing for single-cell CRISPR screens at low multiplicity of infection},   author = {Timothy Barry and Kaishu Mason and Kathryn Roeder and Eugene Katsevich},   journal = {Genome Biology},   pages = {1-30},   year = {2024},   publisher = {Springer Nature},   url = {https://genomebiology.biomedcentral.com/articles/10.1186/s13059-024-03254-2}, }"},{"path":"https://katsevich-lab.github.io/sceptre/index.html","id":"sceptre","dir":"","previous_headings":"","what":"sceptre","title":"Analysis of Single-Cell CRISPR Screen Data","text":"sceptre R package single-cell CRISPR screen data analysis, emphasizing statistical rigor, massive scalability, ease use.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/index.html","id":"v0100-sceptre-at-massive-scale","dir":"","previous_headings":"","what":"v0.10.0: sceptre at massive scale","title":"Analysis of Single-Cell CRISPR Screen Data","text":"sceptre v0.10.0 represents another major upgrade sceptre software. integrated sceptre ondisc, companion R package facilitates large-scale computing single-cell data. sceptre now supports analysis single-cell CRISPR screen data --core laptop distributed across hundreds processors computing cluster cloud. sceptre v0.10.0 includes following updates: Support disk-backed sceptre objects, enabling analysis data large fit memory sceptre Nextflow pipeline, enabling deployment sceptre across hundreds processors cluster cloud updated e-book containing new sections -scale sceptre statistical methodology underlying sceptre New functionality plotting inspecting gRNA--cell assignments comprehensive suite unit tests, verify correctness code detailed man pages (including runnable examples) minor bug fixes can see RECOMB poster information update.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/index.html","id":"featured-publications","dir":"","previous_headings":"","what":"Featured publications","title":"Analysis of Single-Cell CRISPR Screen Data","text":"Barry et al., 2024. “Robust differential expression testing…”. Genome Biology. Barry et al., 2024. “Exponential family measurement error models…”. Biostatistics. Morris et al., 2023. “Discovery target genes pathways…”. Science. Barry et al., 2021. “SCEPTRE improves calibration sensitivity…”. Genome Biology. sceptre also recently featured 10x Genomics analysis guide.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/index.html","id":"bug-reports-feature-requests-and-software-questions","dir":"","previous_headings":"","what":"Bug reports, feature requests, and software questions","title":"Analysis of Single-Cell CRISPR Screen Data","text":"bug reports, please open GitHub issue. questions sceptre functionality, documentation, apply data, please start discussion Q&.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign gRNAs to cells — assign_grnas","title":"Assign gRNAs to cells — assign_grnas","text":"assign_grnas() performs gRNA--cell assignments. sceptre provides three gRNA--cell assignment strategies: mixture method, thresholding method, maximum method. mixture method involves assigning gRNAs cells using principled mixture model. Next, thresholding method assigns gRNA cell UMI count gRNA cell greater equal integer threshold. Finally, maximum method assigns gRNA accounts greatest number UMIs given cell cell. maximum method available low MOI. See Chapter 3 manual detailed information assign_grnas().","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign gRNAs to cells — assign_grnas","text":"","code":"assign_grnas(   sceptre_object,   method = \"default\",   print_progress = TRUE,   parallel = FALSE,   n_processors = \"auto\",   log_dir = tempdir(),   ... )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign gRNAs to cells — assign_grnas","text":"sceptre_object sceptre_object method (optional) string indicating method use assign gRNAs cells, one \"mixture\", \"thresholding\", \"maximum\" print_progress (optional; default TRUE) logical indicating whether print progress updates parallel (optional; default FALSE) logical indicating whether run function parallel n_processors (optional; default \"auto\") integer specifying number processors use parallel set TRUE. default, \"auto\", automatically detects number processors available machine. log_dir (optional; default tempdir()) string indicating directory write log files (ignored parallel = FALSE) ... optional method-specific additional arguments","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign gRNAs to cells — assign_grnas","text":"updated sceptre_object gRNA assignments carried ","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Assign gRNAs to cells — assign_grnas","text":"See manual information method-specific additional arguments.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/assign_grnas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign gRNAs to cells — assign_grnas","text":"","code":"data(\"lowmoi_example_data\") # 1. import data, set default analysis parameters sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   extra_covariates = lowmoi_example_data$extra_covariates,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   moi = \"low\" ) |> set_analysis_parameters()  # 2. assign gRNAs (three different methods) sceptre_object <- sceptre_object |> assign_grnas(method = \"thresholding\") sceptre_object <- sceptre_object |> assign_grnas(method = \"maximum\") sceptre_object <- sceptre_object |> assign_grnas(   method = \"mixture\", parallel = TRUE, n_processors = 2 ) #> Running gRNA assignments in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files assign_grnas_*.out for progress updates."},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_cis_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct cis pairs — construct_cis_pairs","title":"Construct cis pairs — construct_cis_pairs","text":"construct_cis_pairs() helper function facilitate construction cis pairs. construct_cis_pairs() returns set target-response pairs target response located chromosome close physical proximity one another. construct_cis_pairs() useful pair constructor function screens aim map noncoding regulatory elements (e.g., enhancers noncoding GWAS variants) target genes cis. construct_cis_pairs() assumes columns chr, start, stop present grna_target_data_frame, giving chromosome, start position, end position, respectively, region gRNA targets. construct_cis_pairs() takes several arguments: sceptre_object (required), distance_threshold (optional), positive_control_pairs (optional), response_position_data_frame (optional). default, construct_cis_pairs() pairs gRNA target set responses chromosome target within distance_threshold bases target. (default value distance_threshold 500,000 bases, half megabase.) positive_control_pairs data frame optionally can passed construct_cis_pairs(), case positive control targets (.e., entries within grna_target column positive_control_pairs) excluded cis pairs. One may want exclude discovery analysis targets intended positive control purposes . See Section 2.2.2 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_cis_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct cis pairs — construct_cis_pairs","text":"","code":"construct_cis_pairs(   sceptre_object,   positive_control_pairs = data.frame(),   distance_threshold = 500000L,   response_position_data_frame = gene_position_data_frame_grch38 )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_cis_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct cis pairs — construct_cis_pairs","text":"sceptre_object sceptre_object positive_control_pairs (optional) data frame columns grna_target response_id containing positive control pairs; supplied, positive control targets excluded cis pairs. distance_threshold (optional) target-response pairs located within distance_threshold bases one another chromosome included cis discovery set. response_position_data_frame (optional) data frame columns response_id, chr, position giving genomic coordinate response; default response_position_data_frame set data frame containing genomic coordinate gene human genome relative reference genome GRCh38.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_cis_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct cis pairs — construct_cis_pairs","text":"data frame columns grna_target response_id containing cis pairs","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_cis_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct cis pairs — construct_cis_pairs","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_positive_control_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct positive control pairs — construct_positive_control_pairs","title":"Construct positive control pairs — construct_positive_control_pairs","text":"construct_positive_control_pairs() helper function facilitate construction positive control pairs. Positive control pairs target-response pairs know (strong reason believe) regulatory relationship target response. can use positive control pairs verify sceptre sensitive (.e., capable detecting true associations) dataset analysis. construct_positive_control_pairs() takes argument sceptre_object returns data frame columns grna_target response_id, gRNA targets response IDs matching names paired. Typically, positive control set consists transcription start sites paired gene regulated transcription start sites. See Section 2.2 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_positive_control_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct positive control pairs — construct_positive_control_pairs","text":"","code":"construct_positive_control_pairs(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_positive_control_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct positive control pairs — construct_positive_control_pairs","text":"sceptre_object sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_positive_control_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct positive control pairs — construct_positive_control_pairs","text":"data frame columns grna_target response_id containing positive control pairs","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_positive_control_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct positive control pairs — construct_positive_control_pairs","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct trans pairs — construct_trans_pairs","title":"Construct trans pairs — construct_trans_pairs","text":"construct_trans_pairs() helper function facilitate construction set trans pairs. construct_trans_pairs() returns entire set possible target-response pairs. construct_trans_pairs() useful pair constructor function analyses seek conduct trans analysis, testing target response. construct_trans_pairs() takes arguments sceptre_object (required), positive_control_pairs (optional), pairs_to_exclude (optional). default construct_trans_pairs() returns data frame columns grna_target response_id, gRNA target mapped response ID.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct trans pairs — construct_trans_pairs","text":"","code":"construct_trans_pairs(   sceptre_object,   positive_control_pairs = data.frame(),   pairs_to_exclude = \"none\" )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct trans pairs — construct_trans_pairs","text":"sceptre_object sceptre_object positive_control_pairs (optional) set positive control pairs pairs_to_exclude (optional; default \"none\") string specifying pairs exclude trans pairs, one \"none\", \"pc_pairs\", \"pairs_containing_pc_targets\"","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct trans pairs — construct_trans_pairs","text":"data frame columns grna_target response_id containing trans discovery set","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct trans pairs — construct_trans_pairs","text":"optional argument pairs_to_exclude enables user remove specific pairs trans set takes values \"none\", \"pc_pairs\", \"pairs_containing_pc_targets\". pairs_to_exclude set \"none\" (default), pairs removed trans set. Next, pairs_to_exclude set \"pc_pairs\" (positive_control_pairs data frame passed), positive control target-response pairs excluded trans set. Finally, pairs_to_exclude set \"pairs_containing_pc_targets\" (positive_control_pairs passed), pairs containing positive control gRNA target excluded trans pairs. (sense setting pairs_to_exclude \"pairs_containing_pc_targets\" stronger setting pairs_to_exclude \"pc_pairs\".) Typically, gene-targeting (resp., noncoding-regulatory-element-targeting) screens, set pairs_to_exclude \"pc_pairs\" (resp., \"pairs_containing_pc_targets\"). See Section 2.2.2 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/construct_trans_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct trans pairs — construct_trans_pairs","text":"","code":"# 1. low-moi, gene-targeting screen data(\"lowmoi_example_data\") sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   extra_covariates = lowmoi_example_data$extra_covariates,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   moi = \"low\" ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_trans_pairs(   sceptre_object = sceptre_object,   positive_control_pairs = positive_control_pairs,   pairs_to_exclude = \"pc_pairs\" )  # 2. high-moi, enhancer-targeting screen data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_trans_pairs(   sceptre_object = sceptre_object,   positive_control_pairs = positive_control_pairs,   pairs_to_exclude = \"pairs_containing_pc_targets\" )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/gene_position_data_frame_grch38.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene position data frames — gene_position_data_frame_grch38","title":"Gene position data frames — gene_position_data_frame_grch38","text":"gene_position_data_frame_grch38 gene_position_data_frame_grch37 contain coordinate transcription start site position gene relative reference genome GRCh38 GRCh37, respectively. gene_position_data_frame_grch38 gene_position_data_frame_grch37 constructed reference genomes available 10x Genomics website. GRCh38 reference genome used 10x Cell Ranger since 2020.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/gene_position_data_frame_grch38.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene position data frames — gene_position_data_frame_grch38","text":"","code":"data(gene_position_data_frame_grch38)  data(gene_position_data_frame_grch37)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/gene_position_data_frame_grch38.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Gene position data frames — gene_position_data_frame_grch38","text":"object class data.table (inherits data.frame) 36572 rows 4 columns. object class data.table (inherits data.frame) 57773 rows 4 columns.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/gene_position_data_frame_grch38.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gene position data frames — gene_position_data_frame_grch38","text":"","code":"head(gene_position_data_frame_grch38) #>        response_id response_name    chr position #>             <char>        <char> <fctr>    <int> #> 1: ENSG00000243485   MIR1302-2HG   chr1    29554 #> 2: ENSG00000237613       FAM138A   chr1    36081 #> 3: ENSG00000186092         OR4F5   chr1    65419 #> 4: ENSG00000239945    AL627309.3   chr1    91105 #> 5: ENSG00000238009    AL627309.1   chr1   133723 #> 6: ENSG00000239906    AL627309.2   chr1   140339 head(gene_position_data_frame_grch37) #>        response_id response_name    chr position #>             <char>        <char> <fctr>    <int> #> 1: ENSG00000223972       DDX11L1   chr1    11869 #> 2: ENSG00000227232        WASH7P   chr1    29806 #> 3: ENSG00000243485    MIR1302-10   chr1    29554 #> 4: ENSG00000237613       FAM138A   chr1    36081 #> 5: ENSG00000268020        OR4G4P   chr1    52473 #> 6: ENSG00000240361       OR4G11P   chr1    62948"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get gRNA assignments — get_grna_assignments","title":"Get gRNA assignments — get_grna_assignments","text":"get_grna_assignments() returns gRNA--cell assignments contained within sceptre_object. output sparse logical matrix, gRNAs rows cells columns. given entry matrix set TRUE given gRNA assigned given cell (FALSE otherwise).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get gRNA assignments — get_grna_assignments","text":"","code":"get_grna_assignments(sceptre_object, apply_cellwise_qc = FALSE)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get gRNA assignments — get_grna_assignments","text":"sceptre_object sceptre_object assign_grnas() called apply_cellwise_qc logical value (.e., TRUE FALSE) indicating whether return gRNA--cell assignment matrix cellwise QC applied (default FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get gRNA assignments — get_grna_assignments","text":"sparse logical matrix containing gRNA--cell assignments","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get gRNA assignments — get_grna_assignments","text":"using \"maximum\" assignment strategy, exactly one gRNA assigned given cell. words, column gRNA--cell assignment matrix contains exactly one TRUE entry.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_grna_assignments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get gRNA assignments — get_grna_assignments","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) discovery_pairs <- construct_cis_pairs(sceptre_object) sceptre_object <- sceptre_object |>   set_analysis_parameters(     discovery_pairs = discovery_pairs,     side = \"left\"   ) |>   assign_grnas(     method = \"mixture\", parallel = TRUE, n_processors = 2   ) |>   run_qc() #> Running gRNA assignments in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files assign_grnas_*.out for progress updates.  grna_assignment_matrix <- get_grna_assignments(   sceptre_object = sceptre_object ) grna_assignment_matrix_with_qc <- get_grna_assignments(   sceptre_object = sceptre_object,   apply_cellwise_qc = TRUE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_response_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Data getter functions — get_response_matrix","title":"Data getter functions — get_response_matrix","text":"data getter functions (.e., get_response_matrix(), get_grna_matrix(), get_cell_covariates()) return specified data field sceptre_object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_response_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data getter functions — get_response_matrix","text":"","code":"get_response_matrix(sceptre_object)  get_grna_matrix(sceptre_object)  get_cell_covariates(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_response_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data getter functions — get_response_matrix","text":"sceptre_object sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_response_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data getter functions — get_response_matrix","text":"get_response_matrix() returns response matrix contained within sceptre_object. get_grna_matrix() returns gRNA matrix contained within sceptre_object. get_cell_covariates() returns cell covariate data frame contained within sceptre_object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_response_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data getter functions — get_response_matrix","text":"","code":"# 1. create a sceptre_object  data(highmoi_example_data) data(grna_target_data_frame_highmoi) sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names )  # 2. extract data fields from the sceptre_object response_matrix <- get_response_matrix(sceptre_object) grna_matrix <- get_grna_matrix(sceptre_object) cell_covariates <- get_cell_covariates(sceptre_object)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Get result — get_result","title":"Get result — get_result","text":"get_result() returns data frame containing result calibration check, power check, discovery analysis. pass arguments sceptre_object analysis, latter string indicating function whose results querying. output data frame, rows correspond target-response pairs, columns follows: response_id, grna_target, n_nonzero_trt, n_nonzero_cntrl, pass_qc (TRUE/FALSE value indicating whether pair passes pairwise QC), p_value, log_2_fold_change, significant (TRUE/FALSE value indicating whether pair called significant). p-value contained within p_value column raw (.e., non-multiplicity-adjusted) p-value. See Section 8 introductory chapter manual information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get result — get_result","text":"","code":"get_result(sceptre_object, analysis)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get result — get_result","text":"sceptre_object sceptre_object analysis string indicating name analysis whose results querying, one \"run_calibration_check\", \"run_power_check\", \"run_discovery_analysis\".","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get result — get_result","text":"data frame containing results analysis","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get result — get_result","text":"output_amount set 2 3 run_calibration_check(), run_power_check(), run_discovery_analysis(), result data frame contains additional columns; see Chapter 6 manual information.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/get_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get result — get_result","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) pc_result <- sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\",     positive_control_pairs = positive_control_pairs   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_power_check() |>   get_result(\"run_power_check\") #> Note: If you are on a Mac laptop or desktop, consider setting `parallel = TRUE` to improve speed. Otherwise, keep `parallel = FALSE`. #>  #> Warning: The calibration check (`run_calibration_check()`) should be run before the power check. #>  #> Generating permutation resamples. ✓ #> Analyzing pairs containing response ENSG00000224277 (1 of 5) #> Analyzing pairs containing response ENSG00000226772 (5 of 5)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/grna_target_data_frame_highmoi.html","id":null,"dir":"Reference","previous_headings":"","what":"gRNA target data frame — grna_target_data_frame_highmoi","title":"gRNA target data frame — grna_target_data_frame_highmoi","text":"gRNA target data frame corresponding example high MOI data. data frame contains columns grna_id (ID individual gRNA), grna_target (genomic target gRNA), chr (target chromosome), start (start coordinate target location), end (end coordinate target location).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/grna_target_data_frame_highmoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gRNA target data frame — grna_target_data_frame_highmoi","text":"","code":"data(grna_target_data_frame_highmoi)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/grna_target_data_frame_highmoi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gRNA target data frame — grna_target_data_frame_highmoi","text":"object class data.frame 60 rows 5 columns.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/highmoi_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example high-MOI data — highmoi_example_data","title":"Example high-MOI data — highmoi_example_data","text":"example high-MOI CRISPRi data small simulated dataset modeled \"genome-wide framework mapping gene regulation via cellular genetic screens\" Gasperini et al., 2019. data contain perturbations gene transcription start sites (TSSs) enhancers, well non- targeting perturbations.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/highmoi_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example high-MOI data — highmoi_example_data","text":"","code":"data(highmoi_example_data)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/highmoi_example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example high-MOI data — highmoi_example_data","text":"object class list length 4.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/highmoi_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example high-MOI data — highmoi_example_data","text":"example data stored list containing following components: response_matrix: gene--cell expression matrix grna_matrix: gRNA--cell expression matrix extra_covariates: data frame containing single column, batch, specifying batch cell sequenced (batch_1 batch_2) gene_names: human-readable name gene","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data — import_data","title":"Import data — import_data","text":"import_data() imports data collection R objects create sceptre_object. Users can create either standard sceptre object ondisc-backed sceptre object; latter appropriate large-scale data. See Chapter 1 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data — import_data","text":"","code":"import_data(   response_matrix,   grna_matrix,   grna_target_data_frame,   moi,   extra_covariates = data.frame(),   response_names = NA_character_,   use_ondisc = FALSE,   directory_to_write = NULL )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data — import_data","text":"response_matrix matrix response UMI counts, responses rows cells columns. matrix type \"matrix\", \"dgCMatrix\", \"dgRMatrix\", \"dgTMatrix\". row names matrix give response IDs. grna_matrix matrix gRNA UMI counts, gRNAs rows cells columns. matrix type \"matrix\", \"dgCMatrix\", \"dgRMatrix\", \"dgTMatrix\". row names matrix give gRNA IDs. grna_target_data_frame data frame containing columns grna_id grna_target mapping individual gRNA target. Non-targeting gRNAs assigned label \"non-targeting\". Optionally, grna_target_data_frame can contain columns chr, start, end, giving chromosome, start coordinate, end coordiante, respectively, gRNA. Additionally, grna_target_data_frame can contain column vector_id specifying vector given gRNA belongs. moi string indicating MOI dataset, either \"low\" \"high\". extra_covariates (optional) data frame containing extra covariates (e.g., batch, biological replicate) beyond sceptre can compute. response_names (optional) vector human-readable response names; names prefix \"MT-\" taken mitochondrial genes used compute covariate response_p_mito. use_ondisc (default FALSE) logical value (.e., TRUE FALSE) indicating whether create ondisc-backed sceptre_object (TRUE) standard sceptre_object (FALSE). directory_to_write (optional) file path directory write backing .odm files response gRNA expression matrices. Must supplied use_ondisc set TRUE.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data — import_data","text":"initialized sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data — import_data","text":"","code":"data(\"lowmoi_example_data\") # 1. initialize a standard sceptre_object from R objects sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   extra_covariates = lowmoi_example_data$extra_covariates,   moi = \"low\" )  # 2. initialize an ondisc-backed sceptre_object from R objects sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   extra_covariates = lowmoi_example_data$extra_covariates,   moi = \"low\",   use_ondisc = TRUE,   directory_to_write = tempdir() )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_cellranger.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from Cell Ranger — import_data_from_cellranger","title":"Import data from Cell Ranger — import_data_from_cellranger","text":"import_data_from_cellranger() imports data output one calls Cell Ranger count. directory supplied input function feature-barcode format, containing files features.tsv.gz  matrix.mtx.gz (optionally barcodes.tsv.gz). Users can create either standard sceptre object ondisc-backed sceptre object; latter appropriate large-scale data. See introductory chapter Chapter 1 manual information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_cellranger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from Cell Ranger — import_data_from_cellranger","text":"","code":"import_data_from_cellranger(   directories,   moi,   grna_target_data_frame,   extra_covariates = data.frame(),   use_ondisc = FALSE,   directory_to_write = NULL )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_cellranger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from Cell Ranger — import_data_from_cellranger","text":"directories character vector file paths directories containing output one calls Cell Ranger count. directory contain files matrix.mtx.gz features.tsv.gz (optionally barcodes.tsv.gz). moi string indicating MOI dataset, either \"low\" \"high\". grna_target_data_frame data frame containing columns grna_id grna_target mapping individual gRNA target. Non-targeting gRNAs assigned label \"non-targeting\". Optionally, grna_target_data_frame can contain columns chr, start, end, giving chromosome, start coordinate, end coordiante, respectively, gRNA. Additionally, grna_target_data_frame can contain column vector_id specifying vector given gRNA belongs. extra_covariates (optional) data frame containing extra covariates (e.g., batch, biological replicate) beyond sceptre can compute. use_ondisc (optional; default FALSE) logical indicating whether store expression data disk-backed ondisc matrix (TRUE) -memory sparse matrix (FALSE). directory_to_write (optional) string indicating directory write backing .odm files (must specified use_ondisc set TRUE).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_cellranger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from Cell Ranger — import_data_from_cellranger","text":"initialized sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_cellranger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from Cell Ranger — import_data_from_cellranger","text":"","code":"data(grna_target_data_frame_highmoi) directories <- paste0(   system.file(\"extdata\", package = \"sceptre\"),   \"/highmoi_example/gem_group_\", c(1, 2) )  # 1. create a standard sceptre_object from Cell Ranger output sceptre_object <- import_data_from_cellranger(   directories = directories,   moi = \"high\",   grna_target_data_frame = grna_target_data_frame_highmoi, ) #> Processing directory 1. ✓ #> Processing directory 2. ✓ #> Combining matrices across directories. ✓ #> Creating the sceptre object. ✓  # 2. create an ondisc-backed sceptre_object from Cell Ranger output sceptre_object <- import_data_from_cellranger(   directories = directories,   moi = \"high\",   grna_target_data_frame = grna_target_data_frame_highmoi,   use_ondisc = TRUE,   directory_to_write = tempdir() ) #> Round 1/2 processing of the input files. #> \tProcessing file 1 of 2. #> \tProcessing file 2 of 2. #> Round 2/2 processing of the input files. #> \tProcessing file 1 of 2. Computing cellwise covariates. Writing to disk. #> \tProcessing file 2 of 2. Computing cellwise covariates. Writing to disk."},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from Parse (experimental) — import_data_from_parse","title":"Import data from Parse (experimental) — import_data_from_parse","text":"import_data_from_parse() imports data output Parse count matrix generation program. See Chapter 1 manual information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from Parse (experimental) — import_data_from_parse","text":"","code":"import_data_from_parse(   gene_mat_fp,   grna_mat_fp,   all_genes_fp,   all_grnas_fp,   moi,   grna_target_data_frame,   extra_covariates = data.frame() )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from Parse (experimental) — import_data_from_parse","text":"gene_mat_fp file path gene count_matrix.mtx file. grna_mat_fp file path gRNA count_matrix.mtx file. all_genes_fp file path all_genes.csv file containing gene IDs. all_grnas_fp file path all_guides.csv file containing gRNA IDs. gRNA IDs assumed second column (.e., \"gene_name\" column) file. moi string indicating MOI dataset, either \"low\" \"high\". grna_target_data_frame data frame containing columns grna_id grna_target mapping individual gRNA target. Non-targeting gRNAs assigned label \"non-targeting\". Optionally, grna_target_data_frame can contain columns chr, start, end, giving chromosome, start coordinate, end coordiante, respectively, gRNA. Additionally, grna_target_data_frame can contain column vector_id specifying vector given gRNA belongs. extra_covariates (optional) data frame containing extra covariates (e.g., batch, biological replicate) beyond sceptre can compute.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from Parse (experimental) — import_data_from_parse","text":"initialized sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import data from Parse (experimental) — import_data_from_parse","text":"import_data_from_parse() experimental, API function subject change. expect API solidify learn Parse platform structure Parse count matrix generation program output.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/import_data_from_parse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from Parse (experimental) — import_data_from_parse","text":"","code":"directory <- paste0(   system.file(\"extdata\", package = \"sceptre\"),   \"/parse_example/\" ) gene_mat_fp <- paste0(directory, \"gene_mat.mtx\") grna_mat_fp <- paste0(directory, \"grna_mat.mtx\") all_genes_fp <- paste0(directory, \"all_genes.csv\") all_grnas_fp <- paste0(directory, \"all_grnas.csv\") grna_target_data_frame <- data.frame(   grna_id = c(\"guide_A\", \"guide_B\", \"guide_C\"),   grna_target = c(\"target-A\", \"target-B\", \"non-targeting\") ) sceptre_object <- import_data_from_parse(   gene_mat_fp = gene_mat_fp,   grna_mat_fp = grna_mat_fp,   all_genes_fp = all_genes_fp,   all_grnas_fp = all_grnas_fp,   moi = \"low\",   grna_target_data_frame = grna_target_data_frame )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/lowmoi_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example low-MOI data — lowmoi_example_data","title":"Example low-MOI data — lowmoi_example_data","text":"example low-MOI data small simulated dataset modeled paper \"Characterizing molecular regulation inhibitory immune checkpoints multimodal single-cell screens\" Papalexi et al., 2021. dataset includes gene-targeting CRISPRko perturbations well non- targeting perturbations.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/lowmoi_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example low-MOI data — lowmoi_example_data","text":"","code":"data(lowmoi_example_data)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/lowmoi_example_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example low-MOI data — lowmoi_example_data","text":"object class list length 4.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/lowmoi_example_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example low-MOI data — lowmoi_example_data","text":"example data stored list containing four components: response_matrix: gene--cell expression matrix grna_matrix: gRNA--cell expression matrix grna_target_data_frame:  data frame containing columns grna_id (ID individual gRNA) grna_target (genomic target gRNA) extra_covariates: data frame single column, batch, specifying batch cell sequenced (batch_1 batch_2)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot — plot,sceptre_object-method","title":"Plot — plot,sceptre_object-method","text":"plot() creates plot depicting current state sceptre_object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot — plot,sceptre_object-method","text":"","code":"# S4 method for sceptre_object plot(x, y, ...)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot — plot,sceptre_object-method","text":"x sceptre_object y ignored argument ... arguments passed plotting function dispatched plot()","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot — plot,sceptre_object-method","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot — plot,sceptre_object-method","text":"plot() \"generic\" sense dispatches specific plotting function based pipeline function recently called sceptre_object. example, run_assign_grnas() recently called pipeline function, plot() dispatches plot_run_assign_grnas(). Similarly, run_power_check() recently called pipeline function, plot() dispatches plot_run_power_check(), . Users can pass arguments function dispatched plot() named arguments plot().","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot-sceptre_object-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot — plot,sceptre_object-method","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) # set analysis parameters, assign grnas sceptre_object <- sceptre_object |>   set_analysis_parameters() |>   assign_grnas(method = \"thresholding\") |>   plot()"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_assign_grnas.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot assign gRNAs — plot_assign_grnas","title":"Plot assign gRNAs — plot_assign_grnas","text":"plot_assign_grnas() plots outcome gRNA--cell assignment step. top panel plots gRNA--cell assignments n_grnas_to_plot (default 3) randomly selected gRNAs. plot points represent cells; vertical axis indicates UMI count gRNA given cell, horizontal axis indicates whether cell classified “perturbed” (.e., contains gRNA) unperturbed (.e., contain gRNA). Perturbed (resp., unperturbed) cells shown left (resp., right) column. bottom left panel barplot number cells gRNA mapped. Finally, bottom right panel histogram number gRNAs contained cell. mean number gRNAs per cell --- .e., MOI --- displayed purple text.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_assign_grnas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot assign gRNAs — plot_assign_grnas","text":"","code":"plot_assign_grnas(   sceptre_object,   n_grnas_to_plot = 3L,   grnas_to_plot = NULL,   point_size = 0.9,   transparency = 0.8,   return_indiv_plots = FALSE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_assign_grnas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot assign gRNAs — plot_assign_grnas","text":"sceptre_object sceptre_object assign_grnas() called n_grnas_to_plot (optional; default 3) number gRNAs display plots gRNA count versus cell assignment grnas_to_plot (optional; default NULL) character vector giving names specific gRNAs plot; NULL, gRNAs chosen random. point_size (optional; default 0.9) size individual points plot transparency (optional; default 0.8) transparency individual points plot return_indiv_plots (optional; default FALSE) FALSE, list ggplot objects returned; TRUE single cowplot object returned.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_assign_grnas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot assign gRNAs — plot_assign_grnas","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_assign_grnas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot assign gRNAs — plot_assign_grnas","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) |>   set_analysis_parameters() |>   assign_grnas(method = \"thresholding\") |>   plot_assign_grnas()"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot covariates — plot_covariates","title":"Plot covariates — plot_covariates","text":"plot_covariates() creates histogram covariates response_n_nonzero, response_n_umis, (applicable) response_p_mito. Cellwise QC removes cells lie extreme right tail response_p_mito distribution lie extreme left right tail response_n_nonzero response_n_umis distribution. help guide selection QC thresholds, plot_covariates() plots candidate QC thresholds vertical lines histograms. optional arguments response_n_nonzero_range, response_n_umis_range, p_mito_threshold control location candidate QC thresholds. response_n_nonzero_range (resp., response_n_umis_range) length-two vector quantiles (default: c(0.01, 0.99)) indicating location draw candidate QC thresholds response_n_nonzero (resp., response_n_umis) histogram. Next, p_mito_threshold single numeric value interval [0,1] specifying location draw candidate QC threshold response_p_mito plot.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot covariates — plot_covariates","text":"","code":"plot_covariates(   sceptre_object,   response_n_umis_range = c(0.01, 0.99),   response_n_nonzero_range = c(0.01, 0.99),   p_mito_threshold = 0.2,   return_indiv_plots = FALSE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot covariates — plot_covariates","text":"sceptre_object sceptre_object response_n_umis_range (optional; default c(0.01, 0.99)) length-2 vector quantiles indicating location draw vertical lines response_n_umis histogram response_n_nonzero_range (optional; default c(0.01, 0.99)) length-2 vector quantiles indicating location draw vertical lines response_n_nonzero histogram p_mito_threshold (optional; default 0.2) single numeric value interval [0,1] specifying location draw vertical line response_p_mito histogram. Note p_mito_threshold absolute number rather percentile. return_indiv_plots (optional; default FALSE) FALSE, list ggplot objects returned; TRUE single cowplot object returned.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot covariates — plot_covariates","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot covariates — plot_covariates","text":"run_qc() already called sceptre_object, parameters response_n_umis_range, response_n_nonzero_range, p_mito_threshold set corresponding parameters within sceptre_object.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot covariates — plot_covariates","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) |> plot_covariates(p_mito_threshold = 0.07)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot gRNA count distributions — plot_grna_count_distributions","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"plot_grna_count_distributions() plots empirical UMI count distribution one gRNAs. plot_grna_count_distributions() can called sceptre_object point pipeline import_data().","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"","code":"plot_grna_count_distributions(   sceptre_object,   n_grnas_to_plot = 4L,   grnas_to_plot = NULL,   threshold = NULL )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"sceptre_object sceptre_object n_grnas_to_plot (optional; default 4) integer specifying number randomly selected gRNAs plot grnas_to_plot (optional; default NULL) character vector giving names one specific gRNAs plot. NULL, n_grnas_to_plot random gRNAs plotted. threshold (optional; default NULL) integer representing gRNA count cut-; provided, bins length 1 go include value, exponentially growing bins begin. vertical line also drawn value. NULL, 10 largest gRNA count bin. Non-integer values rounded.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"single ggplot2 plot","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"x-axis piecewise linear-log scale, bins size 1 going gRNA counts 0 max(10, threshold), bin widths grow exponentially size. number bar indicates first value counted bar, bar includes integers label integer immediately preceding label next bar right. example, one bar label \"23\" next bar right label \"26\" bar label \"23\" counts values 23, 24, 25 data.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_grna_count_distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot gRNA count distributions — plot_grna_count_distributions","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) |> plot_grna_count_distributions()"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot response-gRNA-target pair — plot_response_grna_target_pair","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"plot_response_grna_target_pair() creates violin plot expression level given response function \"treatment status\" (.e., treatment control) given gRNA target. left (resp., right) violin plot shows expression level response treatment (resp., control) cells. expression level normalized dividing n_response_umis, adding pseudo-count 1 taking log transform. given response-gRNA-target pair analyzed, p-value test association also displayed.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"","code":"plot_response_grna_target_pair(sceptre_object, response_id, grna_target)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"sceptre_object sceptre_object run_qc() called response_id string containing response ID grna_target string containing gRNA target (, grna_integration_strategy set \"singleton\", individual gRNA ID)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"violin plot","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"grna_integration_strategy set \"singleton\", grna_target set gRNA ID.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_response_grna_target_pair.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot response-gRNA-target pair — plot_response_grna_target_pair","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) discovery_pairs <- construct_cis_pairs(sceptre_object) sceptre_object |>   set_analysis_parameters(     side = \"left\",     discovery_pairs = discovery_pairs,     resampling_mechanism = \"permutations\",   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_discovery_analysis(     parallel = TRUE,     n_processors = 2   ) |>   plot_response_grna_target_pair(     response_id = \"ENSG00000211641\",     grna_target = \"candidate_enh_15\"   ) #> Warning: The calibration check (`run_calibration_check()`) should be run before the discovery analysis. #>  #> Generating permutation resamples. ✓ #> Running discovery_analysis in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files discovery_analysis_*.out for progress updates. #>  ✓ #>"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_calibration_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot run calibration check — plot_run_calibration_check","title":"Plot run calibration check — plot_run_calibration_check","text":"plot_run_calibration_check() creates visualization outcome calibration check. visualization consists four panels, describe . upper left panel QQ plot p-values plotted untransformed scale. p-values ideally lie along diagonal line, indicating uniformity p-values bulk distribution. upper right panel QQ plot p-values plotted negative log-10 transformed scale. p-values ideally lie along diagonal line (majority p-values falling within gray confidence band), indicating uniformity p-values tail distribution. lower left panel histogram estimated log-2 fold changes. histogram ideally roughly symmetric centered around zero. Finally, bottom right panel text box displaying () number false discoveries sceptre made negative control data (ii) mean estimated log-fold change.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_calibration_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot run calibration check — plot_run_calibration_check","text":"","code":"plot_run_calibration_check(   sceptre_object,   point_size = 0.55,   transparency = 0.8,   return_indiv_plots = FALSE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_calibration_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot run calibration check — plot_run_calibration_check","text":"sceptre_object sceptre_object run_calibration_check called point_size (optional; default 0.55) size individual points plot transparency (optional; default 0.8) transparency individual points plot return_indiv_plots (optional; default FALSE) FALSE list ggplot returned; TRUE single cowplot object returned.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_calibration_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot run calibration check — plot_run_calibration_check","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_calibration_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot run calibration check — plot_run_calibration_check","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\"   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_calibration_check(     parallel = TRUE,     n_processors = 2,     n_calibration_pairs = 500,     calibration_group_size = 2,   ) |>   plot_run_calibration_check() #> Constructing negative control pairs. ✓ #> Generating permutation resamples. ✓ #> Running calibration_check in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files calibration_check_*.out for progress updates. #>  ✓ #>"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_discovery_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot run discovery analysis — plot_run_discovery_analysis","title":"Plot run discovery analysis — plot_run_discovery_analysis","text":"plot_run_discovery_analysis() creates visualization outcome discovery analysis. visualization consists four plots: upper left plot superimposes discovery p-values (blue) top negative control p-values (red) untransformed scale. upper right plot upper left plot, scale negative log-10 transformed. discovery p-values ideally trend diagonal line, indicating presence signal discovery set. horizontal dashed line indicates multiple testing threshold; discovery pairs whose p-value falls line called significant. bottom left panel volcano plot p-values log fold changes discovery pairs. point corresponds pair; estimated log-2 fold change pair plotted horizontal axis, (negative log-10 transformed) p-value plotted vertical axis. horizontal dashed line indicates multiple testing threshold. Points dashed line (colored purple) called discoveries, points (colored blue) called insignificant. bottom right panel text box displaying number discovery pairs called significant.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_discovery_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot run discovery analysis — plot_run_discovery_analysis","text":"","code":"plot_run_discovery_analysis(   sceptre_object,   x_limits = c(-1.5, 1.5),   point_size = 0.55,   transparency = 0.8,   return_indiv_plots = FALSE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_discovery_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot run discovery analysis — plot_run_discovery_analysis","text":"sceptre_object sceptre_object run_discovery_analysis called x_limits (optional; default c(-1.5, 1.5)) numeric vector length 2 giving lower upper limits x-axis (corresponding log-2 fold change) \"Discovery volcano plot\" panel point_size (optional; default 0.55) size individual points plot transparency (optional; default 0.8) transparency individual points plot return_indiv_plots (optional; default FALSE) FALSE list ggplot returned; TRUE single cowplot object returned.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_discovery_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot run discovery analysis — plot_run_discovery_analysis","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_discovery_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot run discovery analysis — plot_run_discovery_analysis","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 ) sceptre_object |>   set_analysis_parameters(     side = \"left\",     discovery_pairs = discovery_pairs,     resampling_mechanism = \"permutations\",   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_calibration_check(     parallel = TRUE,     n_processors = 2   ) |>   run_discovery_analysis(     parallel = TRUE,     n_processors = 2   ) |>   plot_run_discovery_analysis() #> Constructing negative control pairs. ✓ #> Generating permutation resamples. ✓ #> Running calibration_check in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files calibration_check_*.out for progress updates. #>  ✓ #> Generating permutation resamples. ✓ #> Running discovery_analysis in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files discovery_analysis_*.out for progress updates. #>  ✓ #>"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_power_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot run power check — plot_run_power_check","title":"Plot run power check — plot_run_power_check","text":"plot_run_power_check() creates visualization outcome power check analysis. point plot corresponds target-response pair, positive control pairs left column negative control pairs right column. vertical axis indicates p-value given pair; smaller (.e., significant) p-values positioned higher along axis (p-values truncated clip_to visualization). positive control p-values small, particular, smaller negative control p-values.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_power_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot run power check — plot_run_power_check","text":"","code":"plot_run_power_check(   sceptre_object,   point_size = 1,   transparency = 0.8,   clip_to = 1e-20 )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_power_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot run power check — plot_run_power_check","text":"sceptre_object sceptre_object run_power_check() called point_size (optional; default 1) size individual points plot transparency (optional; default 0.8) transparency individual points plot clip_to (optional; default 1e-20) p-values smaller value set clip_to better visualization. clip_to=0 used clipping done.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_power_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot run power check — plot_run_power_check","text":"single ggplot2 plot","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_power_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot run power check — plot_run_power_check","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) sceptre_object |>   set_analysis_parameters(     side = \"left\",     positive_control_pairs = positive_control_pairs,     resampling_mechanism = \"permutations\",   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_calibration_check(     parallel = TRUE,     n_processors = 2,     n_calibration_pairs = 500,     calibration_group_size = 2   ) |>   run_power_check() |>   plot_run_power_check() #> Constructing negative control pairs. ✓ #> Generating permutation resamples. ✓ #> Running calibration_check in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files calibration_check_*.out for progress updates. #>  ✓ #> Note: If you are on a Mac laptop or desktop, consider setting `parallel = TRUE` to improve speed. Otherwise, keep `parallel = FALSE`. #>  #> Generating permutation resamples. ✓ #> Analyzing pairs containing response ENSG00000224277 (1 of 5) #> Analyzing pairs containing response ENSG00000226772 (5 of 5)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot run QC — plot_run_qc","title":"Plot run QC — plot_run_qc","text":"plot_run_qc() creates visualization outcome QC step. top panel depicts outcome cellwise QC. various cellwise QC filters (e.g., \"N nonzero responses,\" \"N response UMIs,\" \"Percent mito\", etc.) shown horizontal axis, percentage cells removed due application given QC filter shown vertical axis. Note cell can flagged multiple QC filters; example, cell might extremely high response_n_umi value extremely high response_n_nonzero value. Thus, height \"filter\" bar (indicates percentage cells removed due application filter) need equal sum heights bars. bottom panel depicts outcome pairwise QC. point corresponds target-response pair; vertical axis (resp., horizontal axis) indicates n_nonzero_trt (resp., n_nonzero_cntrl) value pair. Pairs n_nonzero_trt n_nonzero_cntrl fall threshold removed (red), remaining pairs retained (green).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot run QC — plot_run_qc","text":"","code":"plot_run_qc(   sceptre_object,   downsample_pairs = 10000L,   point_size = 0.55,   transparency = 0.8,   return_indiv_plots = FALSE )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot run QC — plot_run_qc","text":"sceptre_object sceptre_object run_qc() called downsample_pairs (optional; default 10000) maximum number points plot lower panel figure (.e., \"pairwise QC\" plot) point_size (optional; default 0.55) size individual points plot transparency (optional; default 0.8) transparency individual points plot return_indiv_plots (optional; default FALSE) FALSE list ggplot returned; TRUE single cowplot object returned.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot run QC — plot_run_qc","text":"single cowplot object containing combined panels (return_indiv_plots set TRUE) list individual panels (return_indiv_plots set FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/plot_run_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot run QC — plot_run_qc","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) discovery_pairs <- construct_cis_pairs(sceptre_object) sceptre_object |>   set_analysis_parameters(     discovery_pairs = discovery_pairs,     side = \"left\"   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   plot_run_qc()"},{"path":"https://katsevich-lab.github.io/sceptre/reference/print-sceptre_object-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Print — print,sceptre_object-method","title":"Print — print,sceptre_object-method","text":"print() prints information dataset status analysis console. output contains several fields: Attributes data (summarizing key features data), Analysis status (indicating analysis functions called), Analysis parameters (summarizing analysis parameters set set_analysis_parameters()), gRNA--cell assignment information (summarizing outcome gRNA--cell assignment step), Summary results (summarizing key analysis results). subset fields may printed, depending status analysis.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/print-sceptre_object-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print — print,sceptre_object-method","text":"","code":"# S4 method for sceptre_object print(x)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/print-sceptre_object-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print — print,sceptre_object-method","text":"x sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/print-sceptre_object-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print — print,sceptre_object-method","text":"value NULL","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/print-sceptre_object-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print — print,sceptre_object-method","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) print(sceptre_object) #> An object of class sceptre_object. #>  #> Attributes of the data: #> \t• 500 cells #> \t• 100 responses #> \t• High multiplicity-of-infection  #> \t• 50 targeting gRNAs (distributed across 25 targets)  #> \t• 10 non-targeting gRNAs  #> \t• 5 covariates (batch, grna_n_nonzero, grna_n_umis, response_n_nonzero, response_n_umis) #>  #> Analysis status: #> \t✓ import_data() #> \t✗ set_analysis_parameters() #> \t✗ assign_grnas() #> \t✗ run_qc() #> \t✗ run_calibration_check() #> \t✗ run_power_check() #> \t✗ run_discovery_analysis() #>  #> Analysis parameters:  #> \t• Discovery pairs: not specified #> \t• Positive control pairs: not specified #> \t• Sidedness of test: not specified #> \t• Resampling mechanism: not specified #> \t• gRNA integration strategy: not specified #> \t• Resampling approximation: not specified #> \t• Multiple testing adjustment: none #> \t• N nonzero treatment cells threshold: not specified #> \t• N nonzero control cells threshold: not specified #> \t• Formula object: not specified"},{"path":"https://katsevich-lab.github.io/sceptre/reference/read_ondisc_backed_sceptre_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","title":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","text":"write_ondisc_backed_sceptre_object() read_ondisc_backed_sceptre_object() enable writing reading ondisc-backed sceptre_objects, respectively. First, write_ondisc_backed_sceptre_object() writes ondisc-backed sceptre_object disk, creating file sceptre_object.rds specified directory. Next, read_ondisc_backed_sceptre_object() reads initializes sceptre_object sceptre_object.rds file, response.odm file, grna.odm file stored disk.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/read_ondisc_backed_sceptre_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","text":"","code":"read_ondisc_backed_sceptre_object(   sceptre_object_fp,   response_odm_file_fp,   grna_odm_file_fp )  write_ondisc_backed_sceptre_object(sceptre_object, directory_to_write)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/read_ondisc_backed_sceptre_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","text":"sceptre_object_fp file path sceptre_object.rds file response_odm_file_fp file path backing .odm file response modality grna_odm_file_fp file path backing .odm file gRNA modality sceptre_object sceptre_object directory_to_write directory write sceptre_object.rds file","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/read_ondisc_backed_sceptre_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","text":"write_ondisc_backed_sceptre_object() returns NULL, read_ondisc_backed_sceptre_object() returns ondisc-backed sceptre_object","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/read_ondisc_backed_sceptre_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write or read an ondisc-backed sceptre_object — read_ondisc_backed_sceptre_object","text":"","code":"data(lowmoi_example_data) # 1. create ondisc-backed sceptre_object sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   extra_covariates = lowmoi_example_data$extra_covariates,   moi = \"low\",   use_ondisc = TRUE,   directory_to_write = tempdir() )  # 2. write write_ondisc_backed_sceptre_object(   sceptre_object = sceptre_object,   directory_to_write = tempdir() )  # 3. read rm(sceptre_object) sceptre_object <- read_ondisc_backed_sceptre_object(   sceptre_object_fp = paste0(tempdir(), \"/sceptre_object.rds\"),   response_odm_file_fp = paste0(tempdir(), \"/response.odm\"),   grna_odm_file_fp = paste0(tempdir(), \"/grna.odm\") )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_calibration_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Run calibration check — run_calibration_check","title":"Run calibration check — run_calibration_check","text":"run_calibration_check() runs calibration check. calibration check involves applying sceptre analyze negative control target-response pairs --- pairs know association target response --- ensure control false discovery rate. calibration check enables us verify discovery set sceptre ultimately produces contaminated excess false positives. See Chapter 5 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_calibration_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run calibration check — run_calibration_check","text":"","code":"run_calibration_check(   sceptre_object,   n_calibration_pairs = NULL,   calibration_group_size = NULL,   print_progress = TRUE,   parallel = FALSE,   n_processors = \"auto\",   log_dir = tempdir(),   output_amount = 1 )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_calibration_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run calibration check — run_calibration_check","text":"sceptre_object sceptre_object n_calibration_pairs (optional) number negative control pairs construct test association calibration_group_size (optional) number negative control gRNAs randomly assemble form negative control target print_progress (optional; default TRUE) logical indicating whether print progress updates parallel (optional; default FALSE) logical indicating whether run function parallel n_processors (optional; default \"auto\") integer specifying number processors use parallel set TRUE. default, \"auto\", automatically detects number processors available machine. log_dir (optional; default tempdir()) string indicating directory write log files (ignored parallel = FALSE) output_amount (optional; default 1) integer taking values 1, 2, 3 specifying amount information return. 1 returns least amount information 3 .","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_calibration_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run calibration check — run_calibration_check","text":"updated sceptre_object calibration check carried ","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_calibration_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run calibration check — run_calibration_check","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names )  # set analysis parameters, assign grnas, run qc, run calibration check sceptre_object <- sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\"   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_calibration_check(     n_calibration_pairs = 500,     calibration_group_size = 2,     parallel = TRUE,     n_processors = 2   ) #> Constructing negative control pairs. ✓ #> Generating permutation resamples. ✓ #> Running calibration_check in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files calibration_check_*.out for progress updates. #>  ✓ #>"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_discovery_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Run discovery analysis — run_discovery_analysis","title":"Run discovery analysis — run_discovery_analysis","text":"run_discovery_analysis() runs discovery analysis. discovery analysis involves applying sceptre analyze discovery pairs, target-response pairs whose association status know seek learn. Identifying associations among discovery pairs primary objective single-cell CRISPR screen analysis. See Chapter 6 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_discovery_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run discovery analysis — run_discovery_analysis","text":"","code":"run_discovery_analysis(   sceptre_object,   output_amount = 1,   print_progress = TRUE,   parallel = FALSE,   n_processors = \"auto\",   log_dir = tempdir() )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_discovery_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run discovery analysis — run_discovery_analysis","text":"sceptre_object sceptre_object output_amount (optional; default 1) integer taking values 1, 2, 3 specifying amount information return. 1 returns least amount information 3 . print_progress (optional; default TRUE) logical indicating whether print progress updates parallel (optional; default FALSE) logical indicating whether run function parallel n_processors (optional; default \"auto\") integer specifying number processors use parallel set TRUE. default, \"auto\", automatically detects number processors available machine. log_dir (optional; default tempdir()) string indicating directory write log files (ignored parallel = FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_discovery_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run discovery analysis — run_discovery_analysis","text":"updated sceptre_object discovery analysis carried ","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_discovery_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run discovery analysis — run_discovery_analysis","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) # set analysis parameters, assign grnas, run qc discovery_pairs <- construct_cis_pairs(sceptre_object) sceptre_object <- sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\",     discovery_pairs = discovery_pairs   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_discovery_analysis(     parallel = TRUE,     n_processors = 2   ) #> Warning: The calibration check (`run_calibration_check()`) should be run before the discovery analysis. #>  #> Generating permutation resamples. ✓ #> Running discovery_analysis in parallel. Change directories to /var/folders/wh/j0lkx_9d5zq75dljjxvvgb480000gn/T//Rtmpgnrvnn/sceptre_logs/ and view the files discovery_analysis_*.out for progress updates. #>  ✓ #>"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_power_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Run power check — run_power_check","title":"Run power check — run_power_check","text":"run_power_check() runs power check. power check entails applying sceptre analyze positive control pairs --- pairs know association target response --- ensure sceptre capable detecting true associations. See Chapter 6 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_power_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run power check — run_power_check","text":"","code":"run_power_check(   sceptre_object,   output_amount = 1,   print_progress = TRUE,   parallel = FALSE,   n_processors = \"auto\",   log_dir = tempdir() )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_power_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run power check — run_power_check","text":"sceptre_object sceptre_object output_amount (optional; default 1) integer taking values 1, 2, 3 specifying amount information return. 1 returns least amount information 3 . print_progress (optional; default TRUE) logical indicating whether print progress updates parallel (optional; default FALSE) logical indicating whether run function parallel n_processors (optional; default \"auto\") integer specifying number processors use parallel set TRUE. default, \"auto\", automatically detects number processors available machine. log_dir (optional; default tempdir()) string indicating directory write log files (ignored parallel = FALSE)","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_power_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run power check — run_power_check","text":"updated sceptre_object power check carried ","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_power_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run power check — run_power_check","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names )  # set analysis parameters, assign grnas, run qc positive_control_pairs <- construct_positive_control_pairs(sceptre_object) sceptre_object <- sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\",     positive_control_pairs = positive_control_pairs   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_power_check() #> Note: If you are on a Mac laptop or desktop, consider setting `parallel = TRUE` to improve speed. Otherwise, keep `parallel = FALSE`. #>  #> Warning: The calibration check (`run_calibration_check()`) should be run before the power check. #>  #> Generating permutation resamples. ✓ #> Analyzing pairs containing response ENSG00000224277 (1 of 5) #> Analyzing pairs containing response ENSG00000226772 (5 of 5)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Run QC — run_qc","title":"Run QC — run_qc","text":"run_qc() runs cellwise pairwise QC data. Cellwise QC involves filtering cells covariates response_n_nonzero, response_n_umis, response_p_mito. low-MOI additionally remove cells contain zero multiple gRNAs. Next, pairwise QC involves filtering target-response pairs whose data sparse analyzed reliably. context define “number nonzero treatment cells” (resp., “number nonzero control cells”) number cells treatment group (resp., control group) contain nonzero expression response. (sometimes use shorthand n_nonzero_trt n_nonzero_cntrl refer number nonzero treatment cells control cells, respectively.) Pairwise QC involves filtering target-response pairs n_nonzero_trt n_nonzero_cntrl. See Chapter 4 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run QC — run_qc","text":"","code":"run_qc(   sceptre_object,   n_nonzero_trt_thresh = 7L,   n_nonzero_cntrl_thresh = 7L,   response_n_umis_range = c(0.01, 0.99),   response_n_nonzero_range = c(0.01, 0.99),   p_mito_threshold = 0.2,   additional_cells_to_remove = integer() )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run QC — run_qc","text":"sceptre_object sceptre_object n_nonzero_trt_thresh (optional; default 7L) integer specifying number nonzero treatment cells pair must contain retained n_nonzero_cntrl_thresh (optional; default 7L) integer specifying number nonzero control cells pair must contain retained response_n_umis_range (optional; default c(0.01, 0.99)) length-two vector percentiles specifying location clip left right tails response_n_umis distribution response_n_nonzero_range (optional; default c(0.01, 0.99)) length-two vector percentiles specifying location clip left right tails response_n_nonzero distribution p_mito_threshold (optional; default 0.2) numeric value specifying location clip right tail response_p_mito distribution additional_cells_to_remove (optional) vector integer indices specifying additional cells remove","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run QC — run_qc","text":"updated sceptre_object cellwise pairwise QC applied","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/run_qc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run QC — run_qc","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names )  # set analysis parameters, assign grnas, run qc positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 ) sceptre_object <- sceptre_object |>   set_analysis_parameters(     discovery_pairs = discovery_pairs,     positive_control_pairs = positive_control_pairs,     side = \"left\"   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc()"},{"path":"https://katsevich-lab.github.io/sceptre/reference/sceptre-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sceptre — sceptre-package","title":"sceptre — sceptre-package","text":"sceptre R package single-cell CRISPR screen data analysis, emphasizing statistical rigor, massive scalability, ease use.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/sceptre/reference/sceptre-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sceptre — sceptre-package","text":"Maintainer: Timothy Barry tbarry@hsph.harvard.edu (ORCID) Authors: Joseph Deutsch Eugene Katsevich ekatsevi@wharton.upenn.edu","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/sceptre-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sceptre — sceptre-package","text":"","code":"if (FALSE) { ########################## # Low-MOI CRISPRko example ##########################  # 1. create the sceptre object data(\"lowmoi_example_data\") sceptre_object <- import_data(   response_matrix = lowmoi_example_data$response_matrix,   grna_matrix = lowmoi_example_data$grna_matrix,   extra_covariates = lowmoi_example_data$extra_covariates,   grna_target_data_frame = lowmoi_example_data$grna_target_data_frame,   moi = \"low\" ) print(sceptre_object)  # 2. set the analysis parameters positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_trans_pairs(   sceptre_object = sceptre_object,   positive_control_pairs = positive_control_pairs,   pairs_to_exclude = \"pc_pairs\" )  sceptre_object <- set_analysis_parameters(   sceptre_object = sceptre_object,   discovery_pairs = discovery_pairs,   positive_control_pairs = positive_control_pairs ) print(sceptre_object)  # 3. assign grnas plot_grna_count_distributions(sceptre_object) sceptre_object <- sceptre_object |> assign_grnas() plot(sceptre_object) print(sceptre_object)  # 4. run qc plot_covariates(sceptre_object, p_mito_threshold = 0.075) sceptre_object <- sceptre_object |> run_qc(p_mito_threshold = 0.075) plot(sceptre_object) print(sceptre_object)  # 5. run the calibration check sceptre_object <- run_calibration_check(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 6. run power check sceptre_object <- run_power_check(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 7. run discovery analysis sceptre_object <- run_discovery_analysis(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 8. write results write_outputs_to_directory(sceptre_object = sceptre_object, \"~/sceptre_outputs_lowmoi/\")  ########################## # High-MOI CRISPRi example ########################## # 1. create the sceptre object from cellranger output directories <- paste0(   system.file(\"extdata\", package = \"sceptre\"),   \"/highmoi_example/gem_group_\", c(1, 2) ) data(grna_target_data_frame_highmoi) sceptre_object <- import_data_from_cellranger(   directories = directories,   moi = \"high\",   grna_target_data_frame = grna_target_data_frame_highmoi ) print(sceptre_object)  # 2. set the analysis parameters positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 )  sceptre_object <- set_analysis_parameters(   sceptre_object = sceptre_object,   discovery_pairs = discovery_pairs,   positive_control_pairs = positive_control_pairs,   side = \"left\" ) print(sceptre_object)  # 3. assign grnas plot_grna_count_distributions(sceptre_object) sceptre_object <- sceptre_object |> assign_grnas(parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 4. run qc plot_covariates(sceptre_object, p_mito_threshold = 0.075) sceptre_object <- sceptre_object |> run_qc(p_mito_threshold = 0.075) plot(sceptre_object) print(sceptre_object)  # 5. run the calibration check sceptre_object <- run_calibration_check(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 6. run the power check sceptre_object <- run_power_check(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 7. run discovery analysis sceptre_object <- run_discovery_analysis(sceptre_object, parallel = TRUE, n_processors = 2) plot(sceptre_object) print(sceptre_object)  # 8. write results write_outputs_to_directory(sceptre_object = sceptre_object, \"~/sceptre_outputs_highmoi/\") }"},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set analysis parameters — set_analysis_parameters","title":"Set analysis parameters — set_analysis_parameters","text":"set_analysis_parameters() sets analysis parameters control statistical analysis conducted. See Chapter 2 manual detailed information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set analysis parameters — set_analysis_parameters","text":"","code":"set_analysis_parameters(   sceptre_object,   discovery_pairs = data.frame(grna_target = character(0), response_id = character(0)),   positive_control_pairs = data.frame(grna_target = character(0), response_id =     character(0)),   side = \"both\",   grna_integration_strategy = \"union\",   formula_object = \"default\",   resampling_approximation = \"skew_normal\",   control_group = \"default\",   resampling_mechanism = \"default\",   multiple_testing_method = \"BH\",   multiple_testing_alpha = 0.1 )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set analysis parameters — set_analysis_parameters","text":"sceptre_object sceptre_object discovery_pairs (optional) data frame columns grna_target response_id specifying discovery pairs analyze positive_control_pairs (optional) data frame columns grna_target response_id specifying positive control pairs analyze side (optional; default \"\") sidedness test, one \"left\", \"right\", \"\" grna_integration_strategy (optional; default \"union\") string specifying gRNA integration strategy, either \"singleton\", \"union\", \"bonferroni\" formula_object (optional) formula object specifying adjust covariates model resampling_approximation (optional; default \"skew_normal\") string indicating resampling approximation make null distribution test statistics, either \"skew_normal\" \"no_approximation\" control_group (optional) string specifying control group use differential expression analysis, either \"complement\" \"nt_cells\" resampling_mechanism (optional) string specifying resampling mechanism use, either \"permutations\" \"crt\" multiple_testing_method (optional; default \"BH\") string specifying multiple testing correction method use; see p.adjust.methods options multiple_testing_alpha (optional; default 0.1) numeric specifying nominal level multiple testing correction method","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set analysis parameters — set_analysis_parameters","text":"updated sceptre_object analysis parameters set","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set analysis parameters — set_analysis_parameters","text":"Every argument function optional, typically, users want specify discovery_pairs minimum.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/set_analysis_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set analysis parameters — set_analysis_parameters","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names )  # set analysis parameters positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 ) sceptre_object <- sceptre_object |>   set_analysis_parameters(     discovery_pairs = discovery_pairs,     positive_control_pairs = positive_control_pairs,     side = \"left\"   )"},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_outputs_to_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Write outputs to directory — write_outputs_to_directory","title":"Write outputs to directory — write_outputs_to_directory","text":"write_outputs_to_directory() writes outputs sceptre analysis directory disk. write_outputs_to_directory() writes several files specified directory: text-based summary analysis (analysis_summary.txt), various plots (*.png), calibration check, power check, discovery analysis results (results_run_calibration_check.rds, results_run_power_check.rds, results_run_discovery_analysis.rds, respectively), binary gRNA--cell assignment matrix (grna_assignment_matrix.rds). See Section 8 introductory chapter manual information function.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_outputs_to_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write outputs to directory — write_outputs_to_directory","text":"","code":"write_outputs_to_directory(sceptre_object, directory)"},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_outputs_to_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write outputs to directory — write_outputs_to_directory","text":"sceptre_object sceptre_object directory string giving file path directory disk write results","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_outputs_to_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write outputs to directory — write_outputs_to_directory","text":"value NULL","code":""},{"path":"https://katsevich-lab.github.io/sceptre/reference/write_outputs_to_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write outputs to directory — write_outputs_to_directory","text":"","code":"data(highmoi_example_data) data(grna_target_data_frame_highmoi) # import data sceptre_object <- import_data(   response_matrix = highmoi_example_data$response_matrix,   grna_matrix = highmoi_example_data$grna_matrix,   grna_target_data_frame = grna_target_data_frame_highmoi,   moi = \"high\",   extra_covariates = highmoi_example_data$extra_covariates,   response_names = highmoi_example_data$gene_names ) positive_control_pairs <- construct_positive_control_pairs(sceptre_object) discovery_pairs <- construct_cis_pairs(sceptre_object,   positive_control_pairs = positive_control_pairs,   distance_threshold = 5e6 ) sceptre_object |>   set_analysis_parameters(     side = \"left\",     resampling_mechanism = \"permutations\",     discovery_pairs = discovery_pairs,     positive_control_pairs = positive_control_pairs   ) |>   assign_grnas(method = \"thresholding\") |>   run_qc() |>   run_calibration_check(     parallel = TRUE,     n_processors = 2   ) |>   run_power_check() |>   run_discovery_analysis(     parallel = TRUE,     n_processors = 2   ) |>   write_outputs_to_directory(paste0(tempdir(), \"/sceptre_outputs\")) #> NULL # files written to \"sceptre_outputs\" in tempdir()"},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-0101-2025-01-16","dir":"Changelog","previous_headings":"","what":"sceptre 0.10.1 (2025-01-16)","title":"sceptre 0.10.1 (2025-01-16)","text":"Version 0.10.1 minor update replaced larger, real example data smaller, simulated example data. Furthermore, example data now live sceptre package, rather external sceptredata package.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-0100-2024-04-02","dir":"Changelog","previous_headings":"","what":"sceptre 0.10.0 (2024-04-02)","title":"sceptre 0.10.0 (2024-04-02)","text":"Version 0.10.0 major update sceptre package. version provides support analysis large-scale single-cell CRISPR screen data. also includes several , minor updates. introduced ondisc-backed sceptre_object, special kind sceptre_object data stored -disk opposed -memory. made sceptre R package compatible sceptre Nextflow pipeline. added function plot_response_grna_target_pair(), creates violin plot expression level specified gene across treatment control groups specified target. added function get_grna_assignments(), facilitates obtaining gRNA--cell assignments. updated sceptre e-book, adding two new parts: part -scale sceptre part methodology underlying sceptre. made discovery pairs data frame positive control pairs data frame optional arguments set_analysis_parameters() function. added comprehensive suite unit tests help verify correctness code. fleshed man pages, example adding runable example . moved example data within sceptre package companion sceptredata package. issued minor bug fixes. Please note v0.10.0 higher version number v0.9.2. Also, note need recreate sceptre_object rerun analysis use version 0.10.0. However, able use exact code (assuming currently using v0.9.0 higher).","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-092-2023-12-08","dir":"Changelog","previous_headings":"","what":"sceptre 0.9.2 (2023-12-08)","title":"sceptre 0.9.2 (2023-12-08)","text":"Version 0.9.2 minor update version 0.9.0. Add n_processors argument functions enable parallelization allow users select number processors use. (default, n_processors = \"auto\", selects number processors use based number processors available machine.) Add log_dir argument, enabling users specify directory write log files. Accelerate plot_assign_grnas() function. Fix functionality identifying mitochondrial genes; now, genes prefixed “MT-” “mt-” considered mitochondrial.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-091-2023-10-24","dir":"Changelog","previous_headings":"","what":"sceptre 0.9.1 (2023-10-24)","title":"sceptre 0.9.1 (2023-10-24)","text":"Version 0.9.1 minor update version 0.9.0. added experimental import_data_from_parse() function import data output Parse Biosciences CRISPR Detect. added support \"bonferroni\" gRNA integration strategy.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-090-2023-10-20","dir":"Changelog","previous_headings":"","what":"sceptre 0.9.0 (2023-10-20)","title":"sceptre 0.9.0 (2023-10-20)","text":"Version 0.9.0 total rework sceptre package. new version package fresh user interface faster, memory-efficient, fully featured previous versions. summarize key updates . added sceptre_object class represent single-cell CRISPR screen data. unified low-MOI high-MOI analysis single interface. written manual guide users entire process analyzing single-cell CRISPR screen data. added new mixture model method assigning gRNAs cells principled way. made experimental high-MOI functionality (version 0.3.0) default functionality high-MOI analysis. added functionality carry cell-wise QC. Mac Linux users now can run sceptre parallel. added suite plotting functions help users visualize output different steps sceptre pipeline. added helper functions facilitate construction cis trans discovery sets. added function import data sceptre output one calls CellRanger count.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-030-2023-07-13","dir":"Changelog","previous_headings":"","what":"sceptre 0.3.0 (2023-07-13)","title":"sceptre 0.3.0 (2023-07-13)","text":"Version 0.3.0 introduces new, experimental high MOI function. expect experimental high MOI function faster, memory efficient, powerful current high MOI function datasets. current high MOI function likely deprecated next version package favor experimental function. Please let us know experience using experimental high MOI function, particular whether run bugs. also added new plotting function, namely plot_resampling_distribution. Small changes API run_sceptre_lowmoi function detailed function documentation.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-020-2023-04-03","dir":"Changelog","previous_headings":"","what":"sceptre 0.2.0 (2023-04-03)","title":"sceptre 0.2.0 (2023-04-03)","text":"Version 0.2.0 biggest update yet. added functionality low MOI analysis! low MOI module based new statistical methods computational algorithms.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"sceptre-010-2022-03-10","dir":"Changelog","previous_headings":"","what":"sceptre 0.1.0 (2022-03-10)","title":"sceptre 0.1.0 (2022-03-10)","text":"Version 0.1.0 major update sceptre. Usability speed improved considerably.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"usability-0-1-0","dir":"Changelog","previous_headings":"","what":"Usability","title":"sceptre 0.1.0 (2022-03-10)","text":"function run_sceptre_gRNA_gene_pair, redundant, now deprecated. run_sceptre_high_moi(previously called run_sceptre_in_memory) simpler use: function now four required arguments: gene_matrix (previously called expression_matrix), gRNA_matrix (previously called expression_matrix), covariate_matrix, gene_gRNA_pairs. formerly required arguments storage_dir side now set tempdir() “” default. Additionally, argument pod_sizes removed entirely (handled internally). run_sceptre_high_moi additional optional arguments full_output parallel. full_output controls complexity data frame outputted method. full_output set FALSE (default), run_sceptre_high_moi outputs data frame four columns , easy interpret: gene_id, gRNA_id, p_value, z_value. parallel controls whether function parallelized (TRUE; default) (FALSE). run_sceptre_high_moi now accepts raw (.e., unthresholded) gRNA matrix user-thresholded gRNA matrix. new auxiliary function combine_gRNAs combines gRNAs target chromosomal site. Numerous checks added run_sceptre_high_moi ensure input valid. example, run_sceptre_high_moi checks gene IDs gRNA IDs gene_gRNA_pairs fact subsets row names gene_matrix gRNA_matrix, respectively.","code":""},{"path":"https://katsevich-lab.github.io/sceptre/news/index.html","id":"speed-0-1-0","dir":"Changelog","previous_headings":"","what":"Speed","title":"sceptre 0.1.0 (2022-03-10)","text":"Two accelerations implemented improve speed. accelerations affect API package. First, test statistic used conditional randomization test changed. Previously, test statistic z-score derived Wald test fitted negative binomial GLM. Now, test statistic z-score derived score test negative binomial GLM, asymptotically equivalent former robust finite samples. Additionally, score test-based z-score computed via explicit formula, sidestepping need fit GLM, done previously. Overall, new test statistic faster compute robust previous test statistic. synthetic perturbation indicators now generated part gRNA precomputation, factoring somewhat time-intensive step pairwise tests association.","code":""},{"path":[]}]
